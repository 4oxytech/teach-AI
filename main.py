import numpy as np

def f(x):
    return 2/(1 + np.exp(-x)) - 1 #Функция гиперболический тангенс

def df(x):
    return 0.5*(1 + x)*(1 - x) #Функция для вычисления производной

w1 = np.array([[-0.2, 0.3, -0.4], [0.1, -0.3, -0.4]]) #Веса для первого слоя случайные
w2 = np.array([0.2, 0.3]) #Веса для второго слоя случайные

def go_forward(inp):#Функция которая пропускает вектор наблюдений через нейронную сеть
    sum = np.dot(w1, inp)
    out = np.array([f(x) for x in sum]) #Для каждого нейрона запоминаются выходные значения
#Out выходное значение для скрытого слоя, а У для последнего нейрона
    sum = np.dot(w2, out)
    y = f(sum)
    return (y, out)#Для каждого нейрона запоминаются выходные значения

def train(epoch): #Функция, которая обучает нейронную сеть
    global w2, w1
    lmd = 0.01 #шаг обучения
    N = 1000#Число итераций при обучении
    count = len(epoch) #Размер нашей обучающей выборки
    for k in range(N):
        x = epoch[np.random.randint(0, count)] #Случайный выбор входного сигнала из обучающей выборки
        y, out = go_forward(x[0:3])#прямой проход по НС и вычисление выходных значений нейронов
        e = y - x[-1]#ошибка
        delta = e*df(y)#локальный градиент
        w2[0] = w2[0] - lmd * delta * out[0]#Корректировка веса первой связи
        w2[1] = w2[1] - lmd * delta * out[1]#Корректировка веса второй связи

        delta2 = w2*delta*df(out)#вектор из 2-х величин локальных градиентов
        #корректировка связей первого слоя
        w1[0, :] = w1[0, :] - np.array(x[0:3]) * delta2[0] * lmd
        w1[0, :] = w1[0, :] - np.array(x[0:3]) * delta2[1] * lmd

#Обучающая выборка (она же полная выборка), список из кортежей: первые три параметра - это входной вектор, а последний это требуемое выходное значение
epoch = [(-1, -1, -1, -1),
        (-1, -1, 1, 1),
        (-1, 1, 1, 1),
        (1, -1, -1, -1),
        (1, -1, 1, 1),
        (1, 1, -1, -1),
        (1, 1, 1, 1)]

train(epoch) #Запуск обучения сети
#проверка полученных результатов
for x in epoch:
    y, out = go_forward(x[0:3])
    print(f"Выходное значения НС: {y} => {x[-1]}")
